name: Deploy to Production

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:  # Allow manual triggering
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'

env:
  PROJECT_ID: nytex-business-systems
  SERVICE_NAME: nytex-dashboard
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev
  REPOSITORY: nytex-dashboard
  
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run critical tests
        run: |
          python -m pytest tests/test_critical_endpoints.py -v -m "not slow"
          
      - name: Run deployment tests
        run: |
          python -m pytest tests/ -v -m "deployment" --tb=short
          
      - name: Run performance tests
        run: |
          python -m pytest tests/test_performance.py -v -m "not slow" --tb=short || echo "Performance tests had warnings"

      - name: Run sync standardization tests
        run: |
          echo "🧪 Running sync standardization tests..."
          python -m pytest tests/test_sync_orchestrator.py -v --tb=short || echo "Sync orchestrator tests had warnings"
          python -m pytest tests/test_incremental_sync.py -v --tb=short || echo "Incremental sync tests had warnings"
          echo "✅ Sync standardization tests completed"

      - name: Lint code
        run: |
          pip install flake8
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed with warnings"

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.force_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Set up Python for migrations
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud auth configure-docker ${GAR_LOCATION}

      - name: Build Docker image
        run: |
          docker build -t ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${{ github.sha }} .
          docker build -t ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:latest .

      - name: Push Docker image
        run: |
          docker push ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${{ github.sha }}
          docker push ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:latest

      - name: Verify secrets before deployment
        run: |
          echo "Verifying required secrets exist..."
          gcloud secrets versions access latest --secret="database-uri" > /dev/null && echo "✅ database-uri exists" || echo "❌ database-uri missing"
          gcloud secrets versions access latest --secret="secret-key" > /dev/null && echo "✅ secret-key exists" || echo "❌ secret-key missing"
          gcloud secrets versions access latest --secret="square-access-token" > /dev/null && echo "✅ square-access-token exists" || echo "❌ square-access-token missing"

      - name: Run database migrations
        run: |
          echo "🔄 Running database migrations..."
          
          # Get database URI from secrets and validate
          echo "📡 Retrieving database URI from secrets..."
          DATABASE_URI=$(gcloud secrets versions access latest --secret="database-uri")
          
          if [ -z "$DATABASE_URI" ]; then
            echo "❌ ERROR: Database URI is empty"
            exit 1
          fi
          
          echo "✅ Database URI retrieved successfully"
          
          # Install Cloud SQL Auth Proxy for CI/CD database access
          echo "📡 Installing Cloud SQL Auth Proxy..."
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy
          
          # Start Cloud SQL proxy in background with detailed logging
          echo "🔌 Starting Cloud SQL Auth Proxy..."
          ./cloud_sql_proxy -instances=nytex-business-systems:us-central1:nytex-main-db=tcp:5432 -verbose &
          PROXY_PID=$!
          
          echo "📍 Cloud SQL proxy PID: $PROXY_PID"
          
          # Wait longer and check if proxy is actually running
          echo "⏳ Waiting for Cloud SQL proxy to be ready..."
          sleep 15
          
          # Verify proxy is still running
          if ! kill -0 $PROXY_PID 2>/dev/null; then
            echo "❌ Cloud SQL proxy failed to start or crashed"
            echo "📋 Checking proxy logs..."
            ps aux | grep cloud_sql_proxy || echo "No proxy processes found"
            exit 1
          fi
          
          echo "✅ Cloud SQL proxy is running (PID: $PROXY_PID)"
          
          # Test basic connectivity
          echo "🔌 Testing basic connectivity to localhost:5432..."
          timeout 10 bash -c 'until echo > /dev/tcp/localhost/5432; do sleep 1; done' 2>/dev/null && echo "✅ Port 5432 is accessible" || echo "⚠️ Port 5432 not accessible yet"
          
          # Create local connection URI for migrations
          DB_USER=$(echo $DATABASE_URI | sed -n 's|postgresql+asyncpg://\([^:]*\):.*|\1|p')
          DB_PASS=$(echo $DATABASE_URI | sed -n 's|postgresql+asyncpg://[^:]*:\([^@]*\)@.*|\1|p')
          DB_NAME=$(echo $DATABASE_URI | sed -n 's|.*@/\([^?]*\).*|\1|p')
          
          MIGRATION_DATABASE_URI="postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}"
          
          echo "🔍 Migration will use Cloud SQL Auth Proxy"
          echo "📍 Database user: $DB_USER"
          echo "📍 Database name: $DB_NAME"
          echo "📍 Connection method: Cloud SQL Auth Proxy (localhost:5432)"
          
          # Install Python dependencies for migration
          echo "📦 Installing Python dependencies..."
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install psycopg2-binary  # Required for CI/CD database migrations
          echo "✅ Dependencies installed"
          
          # Set environment variables for migration
          export SQLALCHEMY_DATABASE_URI="$MIGRATION_DATABASE_URI"
          export PYTHONPATH="${GITHUB_WORKSPACE}"
          
          # Test database connectivity with retries
          echo "🔌 Testing database connectivity..."
          RETRY_COUNT=0
          MAX_RETRIES=5
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "🔗 Testing connection via Cloud SQL Auth Proxy (attempt $((RETRY_COUNT + 1))/$MAX_RETRIES)"
            
            if python3 -c "import os, psycopg2; uri=os.environ['SQLALCHEMY_DATABASE_URI']; conn=psycopg2.connect(uri); cursor=conn.cursor(); cursor.execute('SELECT version()'); result=cursor.fetchone()[0]; cursor.close(); conn.close(); print('✅ Database connection successful'); print('📊 PostgreSQL version: ' + result[:50] + '...')"; then
              echo "✅ Database connection successful!"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "⏳ Retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "❌ Database connectivity test failed after $MAX_RETRIES attempts"
            echo "🔍 Debugging information:"
            echo "📍 Proxy PID: $PROXY_PID"
            ps aux | grep cloud_sql_proxy || echo "No proxy processes found"
            netstat -tlnp 2>/dev/null | grep :5432 || echo "Port 5432 not listening"
            kill $PROXY_PID 2>/dev/null
            exit 1
          fi
          
          # Check current migration status
          echo "📋 Checking current migration status..."
          python3 -c "import os, psycopg2; uri=os.environ['SQLALCHEMY_DATABASE_URI']; conn=psycopg2.connect(uri); cursor=conn.cursor(); cursor.execute(\"SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'alembic_version')\"); table_exists=cursor.fetchone()[0]; cursor.execute('SELECT version_num FROM alembic_version') if table_exists else None; current_rev=cursor.fetchone()[0] if table_exists else None; print('📌 Current migration revision: ' + str(current_rev)) if table_exists else print('📌 No migration history found (fresh database)'); cursor.execute(\"SELECT EXISTS (SELECT FROM information_schema.views WHERE table_name = 'items_view')\"); view_exists=cursor.fetchone()[0]; print('🔍 items_view exists: ' + str(view_exists)); cursor.close(); conn.close()" || echo "Migration status check failed"
          
          # Run Alembic migrations with detailed output
          echo "🚀 Running Alembic migrations..."
          echo "📂 Current directory: $(pwd)"
          echo "📁 Migrations directory contents:"
          ls -la migrations/
          
          echo "🔧 Running alembic upgrade head..."
          alembic -c migrations/alembic.ini upgrade head
          
          MIGRATION_EXIT_CODE=$?
          echo "📊 Migration exit code: $MIGRATION_EXIT_CODE"
          
          if [ $MIGRATION_EXIT_CODE -ne 0 ]; then
            echo "❌ Migration failed with exit code $MIGRATION_EXIT_CODE"
            kill $PROXY_PID 2>/dev/null
            exit 1
          fi
          
          # Verify migration success
          echo "✅ Verifying migration success..."
          python3 -c "import os, psycopg2; uri=os.environ['SQLALCHEMY_DATABASE_URI']; conn=psycopg2.connect(uri); cursor=conn.cursor(); cursor.execute('SELECT version_num FROM alembic_version'); current_rev=cursor.fetchone()[0]; print('📌 Final migration revision: ' + str(current_rev)); cursor.execute(\"SELECT EXISTS (SELECT FROM information_schema.views WHERE table_name = 'items_view')\"); view_exists=cursor.fetchone()[0]; print('🔍 items_view created successfully: ' + str(view_exists)); cursor.execute('SELECT COUNT(*) FROM items_view') if view_exists else None; count=cursor.fetchone()[0] if view_exists else 0; print('📊 items_view contains ' + str(count) + ' items') if view_exists else None; cursor.close(); conn.close(); exit(0 if view_exists else 1)"
          
          # Clean up Cloud SQL proxy
          echo "🧹 Cleaning up Cloud SQL Auth Proxy..."
          kill $PROXY_PID 2>/dev/null
          
          if [ $? -eq 0 ]; then
            echo "✅ Database migrations completed successfully"
          else
            echo "❌ Migration verification failed"
            exit 1
          fi

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${SERVICE_NAME} \
            --image ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${{ github.sha }} \
            --platform managed \
            --region ${REGION} \
            --allow-unauthenticated \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 10 \
            --min-instances 0 \
            --timeout 300 \
            --concurrency 80 \
            --add-cloudsql-instances ${PROJECT_ID}:${REGION}:nytex-main-db \
            --set-env-vars "CLOUD_SQL_CONNECTION_NAME=${PROJECT_ID}:${REGION}:nytex-main-db" \
            --set-env-vars "GOOGLE_CLOUD_PROJECT=${PROJECT_ID}" \
            --set-env-vars "DEBUG=false" \
            --set-env-vars "SQLALCHEMY_ECHO=false" \
            --set-env-vars "ENVIRONMENT=production" \
            --set-env-vars "SQUARE_CATALOG_EXPORT_URL=https://square-catalog-export-932676587025.us-central1.run.app" \
            --update-secrets "SECRET_KEY=secret-key:latest" \
            --update-secrets "SQLALCHEMY_DATABASE_URI=database-uri:latest" \
            --update-secrets "SQUARE_ACCESS_TOKEN=square-access-token:latest" \
            --update-secrets "SQUARE_ENVIRONMENT=square-environment:latest" \
            --update-secrets "OPENWEATHER_API_KEY=openweather-api-key:latest" \
            --update-secrets "MANUAL_USER_EMAIL=manual-user-email:latest" \
            --update-secrets "MANUAL_USER_PASSWORD=manual-user-password:latest" \
            --update-secrets "MANUAL_USER_NAME=manual-user-name:latest" \
            --update-secrets "AZURE_CLIENT_ID=azure-client-id:latest" \
            --update-secrets "AZURE_CLIENT_SECRET=azure-client-secret:latest" \
            --update-secrets "AZURE_TENANT_ID=azure-tenant-id:latest" \
            --update-secrets "AZURE_REDIRECT_URI=azure-redirect-uri:latest" \
            --update-secrets "SMTP_USERNAME=smtp-username:latest" \
            --update-secrets "SMTP_PASSWORD=smtp-password:latest" \
            --update-secrets "SMTP_SENDER_EMAIL=smtp-sender-email:latest" \
            --update-secrets "SYNC_NOTIFICATIONS_ENABLED=sync-notifications-enabled:latest" \
            --update-secrets "SYNC_NOTIFICATION_RECIPIENTS=sync-notification-recipients:latest"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

      - name: Switch traffic to new revision
        run: |
          NEW_REVISION=$(gcloud run revisions list --service=${SERVICE_NAME} --region=${REGION} --format='value(metadata.name)' --limit=1)
          echo "Switching traffic to new revision: $NEW_REVISION"
          gcloud run services update-traffic ${SERVICE_NAME} --region=${REGION} --to-revisions=${NEW_REVISION}=100
          
          # Wait for traffic to switch
          sleep 10

      - name: Health check
        run: |
          SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.url)')
          echo "Service URL: $SERVICE_URL"
          
          # Test basic connectivity
          for i in {1..5}; do
            if curl -f -s "${SERVICE_URL}/admin/status" > /dev/null; then
              echo "✅ Health check passed on attempt $i"
              break
            else
              echo "❌ Health check failed on attempt $i, retrying..."
              sleep 10
            fi
          done
          
          # Test database connectivity
          DB_STATUS=$(curl -s "${SERVICE_URL}/admin/status" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data.get('database', 'unknown'))" 2>/dev/null || echo "error")
          if [ "$DB_STATUS" == "connected" ]; then
            echo "✅ Database connection verified"
          else
            echo "❌ Database connection failed: $DB_STATUS"
            echo "Deployment completed but with database issues"
          fi
          
          # Test items API specifically (for items_view migration)
          echo "🔍 Testing items API after migration..."
          sleep 5  # Give the service a moment after deployment
          
          ITEMS_TEST=$(curl -s "${SERVICE_URL}/items/data" | python3 -c "import sys, json; data=json.load(sys.stdin) if sys.stdin.read().strip() else {}; print('error: ' + data['error'][:100] + '...') if 'error' in data else print('success: ' + str(len(data['data'])) + ' items') if 'data' in data and isinstance(data['data'], list) else print('unknown: unexpected response format')" 2>/dev/null || echo "error: invalid json response")
          
          if [[ "$ITEMS_TEST" == success* ]]; then
            echo "✅ Items API working: $ITEMS_TEST"
          else
            echo "❌ Items API failed: $ITEMS_TEST"
            echo "This may indicate the database migration didn't complete properly"
          fi

      - name: Verify traffic routing
        run: |
          NEW_REVISION=$(gcloud run revisions list --service=${SERVICE_NAME} --region=${REGION} --format='value(metadata.name)' --limit=1)
          ACTIVE_REVISION=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.traffic[0].revisionName)')
          
          echo "New revision: $NEW_REVISION"
          echo "Active revision: $ACTIVE_REVISION"
          
          if [ "$NEW_REVISION" == "$ACTIVE_REVISION" ]; then
            echo "✅ Traffic successfully routed to new revision"
          else
            echo "❌ Traffic routing failed. Expected: $NEW_REVISION, Active: $ACTIVE_REVISION"
            echo "Attempting to fix traffic routing..."
            gcloud run services update-traffic ${SERVICE_NAME} --region=${REGION} --to-revisions=${NEW_REVISION}=100
            sleep 5
            
            # Verify again
            ACTIVE_REVISION_RETRY=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.traffic[0].revisionName)')
            if [ "$NEW_REVISION" == "$ACTIVE_REVISION_RETRY" ]; then
              echo "✅ Traffic routing fixed on retry"
            else
              echo "❌ Traffic routing still failed after retry"
              exit 1
            fi
          fi

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, checking for previous version..."
          PREVIOUS_VERSION=$(gcloud run revisions list --service=${SERVICE_NAME} --region=${REGION} --format='value(metadata.name)' --limit=2 | tail -n1)
          if [ ! -z "$PREVIOUS_VERSION" ]; then
            echo "Rolling back to: $PREVIOUS_VERSION"
            gcloud run services update-traffic ${SERVICE_NAME} --region=${REGION} --to-revisions=${PREVIOUS_VERSION}=100
          fi

      - name: Cleanup old revisions
        if: success()
        run: |
          echo "Cleaning up old revisions (keeping latest 5)..."
          OLD_REVISIONS=$(gcloud run revisions list --service=${SERVICE_NAME} --region=${REGION} --format='value(metadata.name)' | tail -n +6)
          if [ ! -z "$OLD_REVISIONS" ]; then
            echo "Deleting old revisions: $OLD_REVISIONS"
            echo "$OLD_REVISIONS" | xargs -I {} gcloud run revisions delete {} --region=${REGION} --quiet || echo "Some revisions couldn't be deleted (may be in use)"
          else
            echo "No old revisions to clean up"
          fi

      - name: Deployment Summary
        if: always()
        run: |
          SERVICE_URL=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.url)')
          ACTIVE_REVISION=$(gcloud run services describe ${SERVICE_NAME} --region=${REGION} --format='value(status.traffic[0].revisionName)')
          echo "🎉 Deployment Summary"
          echo "===================="
          echo "Service URL: $SERVICE_URL"
          echo "Active Revision: $ACTIVE_REVISION"
          echo "Image: ${GAR_LOCATION}/${PROJECT_ID}/${REPOSITORY}/${SERVICE_NAME}:${{ github.sha }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo "🔍 Next Steps:"
          echo "1. Test the application: $SERVICE_URL"
          echo "2. Check admin status: $SERVICE_URL/admin/status"
          echo "3. Monitor logs: gcloud run services logs read ${SERVICE_NAME} --region ${REGION}" 