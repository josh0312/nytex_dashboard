"""add_daily_weather_table

Revision ID: 1e8423d17dc5
Revises: 20250623_182639
Create Date: 2025-06-24 22:24:13.166703

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '1e8423d17dc5'
down_revision = '20250623_182639'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_inventory_counts_catalog_object_id', table_name='inventory_counts')
    op.drop_index('ix_inventory_counts_location_id', table_name='inventory_counts')
    op.drop_table('inventory_counts')
    op.drop_table('sync_state')
    op.alter_column('catalog_categories', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index('ix_catalog_categories_id', table_name='catalog_categories')
    op.alter_column('catalog_inventory', 'variation_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('catalog_inventory', 'location_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('catalog_inventory', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('catalog_inventory', 'calculated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('catalog_inventory', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('catalog_inventory', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_constraint('catalog_inventory_variation_id_location_id_key', 'catalog_inventory', type_='unique')
    op.drop_index('idx_catalog_inventory_location_id', table_name='catalog_inventory')
    op.drop_index('idx_catalog_inventory_variation_id', table_name='catalog_inventory')
    op.alter_column('catalog_items', 'name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('catalog_items', 'tax_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('catalog_items', 'present_at_location_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index('ix_catalog_items_category_id', table_name='catalog_items')
    op.drop_index('ix_catalog_items_id', table_name='catalog_items')
    op.drop_index('ix_catalog_items_reporting_category_id', table_name='catalog_items')
    op.drop_constraint('catalog_items_reporting_category_id_fkey', 'catalog_items', type_='foreignkey')
    op.drop_index('ix_catalog_location_availability_item_id', table_name='catalog_location_availability')
    op.drop_index('ix_catalog_location_availability_location_id', table_name='catalog_location_availability')
    op.drop_constraint('uix_catalog_location_availability', 'catalog_location_availability', type_='unique')
    op.alter_column('catalog_variations', 'price_money',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('catalog_variations', 'present_at_location_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index('ix_catalog_variations_id', table_name='catalog_variations')
    op.drop_index('ix_catalog_variations_item_id', table_name='catalog_variations')
    op.drop_index('ix_catalog_variations_sku', table_name='catalog_variations')
    op.alter_column('catalog_vendor_info', 'present_at_location_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index('ix_catalog_vendor_info_id', table_name='catalog_vendor_info')
    op.drop_index('ix_catalog_vendor_info_variation_id', table_name='catalog_vendor_info')
    op.drop_index('ix_catalog_vendor_info_vendor_id', table_name='catalog_vendor_info')
    op.alter_column('locations', 'address',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'capabilities',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'coordinates',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'business_hours',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_index('ix_locations_id', table_name='locations')
    op.drop_column('locations', 'instagram_username')
    op.drop_column('locations', 'type')
    op.drop_column('locations', 'currency')
    op.drop_column('locations', 'country')
    op.drop_column('locations', 'twitter_username')
    op.drop_column('locations', 'pos_background_url')
    op.drop_column('locations', 'business_name')
    op.drop_column('locations', 'mcc')
    op.drop_column('locations', 'logo_url')
    op.drop_column('locations', 'facebook_url')
    op.drop_column('locations', 'language_code')
    op.drop_column('locations', 'merchant_id')
    op.create_foreign_key(None, 'order_fulfillments', 'orders', ['order_id'], ['id'])
    op.alter_column('order_line_items', 'order_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_index('ix_order_line_items_order_uid', table_name='order_line_items')
    op.drop_index('uix_order_line_items_order_uid', table_name='order_line_items')
    op.create_unique_constraint('uix_order_line_items_order_uid', 'order_line_items', ['order_id', 'uid'])
    op.create_foreign_key(None, 'order_line_items', 'orders', ['order_id'], ['id'])
    op.create_foreign_key(None, 'order_refunds', 'orders', ['order_id'], ['id'])
    op.drop_column('order_refunds', 'refund_metadata')
    op.drop_column('order_refunds', 'updated_at')
    op.drop_column('order_refunds', 'created_at')
    op.create_foreign_key(None, 'order_returns', 'orders', ['order_id'], ['id'])
    op.alter_column('payments', 'delayed_until',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=app.database.models.payment.TimestampTZ(),
               existing_nullable=True)
    op.create_foreign_key(None, 'payments', 'orders', ['order_id'], ['id'])
    op.alter_column('square_item_library_export', 'item_name',
               existing_type=sa.VARCHAR(length=255),
               type_=sa.String(length=500),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'sku',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'categories',
               existing_type=sa.VARCHAR(length=500),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'gtin',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'square_online_item_visibility',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'item_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'weight_lb',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'default_vendor_code',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=True)
    op.drop_column('square_item_library_export', 'location_data')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('square_item_library_export', sa.Column('location_data', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.alter_column('square_item_library_export', 'default_vendor_code',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'weight_lb',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'item_type',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'square_online_item_visibility',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'gtin',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'categories',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=500),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'sku',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=True)
    op.alter_column('square_item_library_export', 'item_name',
               existing_type=sa.String(length=500),
               type_=sa.VARCHAR(length=255),
               existing_nullable=True)
    op.drop_constraint(None, 'payments', type_='foreignkey')
    op.alter_column('payments', 'delayed_until',
               existing_type=app.database.models.payment.TimestampTZ(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.drop_constraint(None, 'order_returns', type_='foreignkey')
    op.add_column('order_refunds', sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('order_refunds', sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.add_column('order_refunds', sa.Column('refund_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'order_refunds', type_='foreignkey')
    op.drop_constraint(None, 'order_line_items', type_='foreignkey')
    op.drop_constraint('uix_order_line_items_order_uid', 'order_line_items', type_='unique')
    op.create_index('uix_order_line_items_order_uid', 'order_line_items', ['order_id', 'uid'], unique=True)
    op.create_index('ix_order_line_items_order_uid', 'order_line_items', ['order_id', 'uid'], unique=True)
    op.alter_column('order_line_items', 'order_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_constraint(None, 'order_fulfillments', type_='foreignkey')
    op.add_column('locations', sa.Column('merchant_id', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('language_code', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('facebook_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('logo_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('mcc', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('business_name', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('pos_background_url', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('twitter_username', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('currency', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('locations', sa.Column('instagram_username', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.create_index('ix_locations_id', 'locations', ['id'], unique=False)
    op.alter_column('locations', 'business_hours',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'coordinates',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'capabilities',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('locations', 'address',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index('ix_catalog_vendor_info_vendor_id', 'catalog_vendor_info', ['vendor_id'], unique=False)
    op.create_index('ix_catalog_vendor_info_variation_id', 'catalog_vendor_info', ['variation_id'], unique=False)
    op.create_index('ix_catalog_vendor_info_id', 'catalog_vendor_info', ['id'], unique=False)
    op.alter_column('catalog_vendor_info', 'present_at_location_ids',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_index('ix_catalog_variations_sku', 'catalog_variations', ['sku'], unique=False)
    op.create_index('ix_catalog_variations_item_id', 'catalog_variations', ['item_id'], unique=False)
    op.create_index('ix_catalog_variations_id', 'catalog_variations', ['id'], unique=False)
    op.alter_column('catalog_variations', 'present_at_location_ids',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('catalog_variations', 'price_money',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.create_unique_constraint('uix_catalog_location_availability', 'catalog_location_availability', ['item_id', 'location_id'])
    op.create_index('ix_catalog_location_availability_location_id', 'catalog_location_availability', ['location_id'], unique=False)
    op.create_index('ix_catalog_location_availability_item_id', 'catalog_location_availability', ['item_id'], unique=False)
    op.create_foreign_key('catalog_items_reporting_category_id_fkey', 'catalog_items', 'catalog_categories', ['reporting_category_id'], ['id'])
    op.create_index('ix_catalog_items_reporting_category_id', 'catalog_items', ['reporting_category_id'], unique=False)
    op.create_index('ix_catalog_items_id', 'catalog_items', ['id'], unique=False)
    op.create_index('ix_catalog_items_category_id', 'catalog_items', ['category_id'], unique=False)
    op.alter_column('catalog_items', 'present_at_location_ids',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('catalog_items', 'tax_ids',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=postgresql.JSON(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('catalog_items', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_index('idx_catalog_inventory_variation_id', 'catalog_inventory', ['variation_id'], unique=False)
    op.create_index('idx_catalog_inventory_location_id', 'catalog_inventory', ['location_id'], unique=False)
    op.create_unique_constraint('catalog_inventory_variation_id_location_id_key', 'catalog_inventory', ['variation_id', 'location_id'])
    op.alter_column('catalog_inventory', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('catalog_inventory', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('catalog_inventory', 'calculated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('catalog_inventory', 'quantity',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('catalog_inventory', 'location_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('catalog_inventory', 'variation_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_index('ix_catalog_categories_id', 'catalog_categories', ['id'], unique=False)
    op.alter_column('catalog_categories', 'name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.create_table('sync_state',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('table_name', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_sync_version', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('records_synced', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('sync_duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='sync_state_pkey'),
    sa.UniqueConstraint('table_name', name='sync_state_table_name_key')
    )
    op.create_table('inventory_counts',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('catalog_object_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('calculated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='inventory_counts_pkey'),
    sa.UniqueConstraint('catalog_object_id', 'location_id', name='uix_inventory_counts_object_location')
    )
    op.create_index('ix_inventory_counts_location_id', 'inventory_counts', ['location_id'], unique=False)
    op.create_index('ix_inventory_counts_catalog_object_id', 'inventory_counts', ['catalog_object_id'], unique=False)
    # ### end Alembic commands ###
