#!/usr/bin/env python3\n\"\"\"\nFix Production Database Schema and Re-sync Orders\n\nThis script:\n1. Applies the primary key constraint fix to production\n2. Clears any partial order data from the failed sync\n3. Re-runs the complete historical orders sync\n\nIMPORTANT: This will fix the schema mismatch that caused only 15,820 orders\nto sync instead of the full 30,391 orders from development.\n\"\"\"\n\nimport asyncio\nimport requests\nimport json\nimport time\nfrom datetime import datetime\n\n# Production URLs\nPROD_URL = \"https://nytex-dashboard-932676587025.us-central1.run.app\"\nSYNC_STATUS_URL = f\"{PROD_URL}/admin/sync-status\"\nHISTORICAL_SYNC_URL = f\"{PROD_URL}/admin/historical-orders-sync\"\nHISTORICAL_STATUS_URL = f\"{PROD_URL}/admin/historical-orders-sync-status\"\n\ndef print_banner(message):\n    \"\"\"Print a formatted banner message\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(f\"🔧 {message}\")\n    print(\"=\" * 60)\n\ndef get_production_status():\n    \"\"\"Get current production database status\"\"\"\n    try:\n        response = requests.get(SYNC_STATUS_URL, timeout=10)\n        if response.status_code == 200:\n            return response.json()\n        else:\n            print(f\"❌ Error getting status: HTTP {response.status_code}\")\n            return None\n    except Exception as e:\n        print(f\"❌ Error getting status: {e}\")\n        return None\n\ndef start_historical_sync():\n    \"\"\"Start the historical orders sync\"\"\"\n    try:\n        print(\"🚀 Starting historical orders sync...\")\n        response = requests.post(HISTORICAL_SYNC_URL, timeout=30)\n        if response.status_code == 200:\n            result = response.json()\n            print(f\"✅ Sync started: {result.get('message', 'Success')}\")\n            return True\n        else:\n            print(f\"❌ Failed to start sync: HTTP {response.status_code}\")\n            if response.text:\n                print(f\"Response: {response.text}\")\n            return False\n    except Exception as e:\n        print(f\"❌ Error starting sync: {e}\")\n        return False\n\ndef monitor_sync_progress():\n    \"\"\"Monitor the sync progress until completion\"\"\"\n    print(\"\\n📊 Monitoring sync progress...\")\n    print(\"Press Ctrl+C to stop monitoring (sync will continue)\\n\")\n    \n    try:\n        while True:\n            try:\n                response = requests.get(HISTORICAL_STATUS_URL, timeout=10)\n                if response.status_code == 200:\n                    data = response.json()\n                    \n                    if not data.get('is_running', False):\n                        print(\"\\n🎉 SYNC COMPLETED!\")\n                        print(f\"📊 Final Results:\")\n                        print(f\"   - Total Orders Synced: {data.get('total_orders_synced', 0):,}\")\n                        print(f\"   - Chunks Completed: {data.get('completed_chunks', 0)}/{data.get('total_chunks', 0)}\")\n                        \n                        # Check for errors\n                        errors = data.get('errors', [])\n                        if errors:\n                            print(f\"⚠️  Errors: {len(errors)} chunks failed\")\n                        else:\n                            print(\"✅ No errors - perfect sync!\")\n                        break\n                    \n                    # Show progress\n                    progress = data.get('progress_percentage', 0)\n                    orders = data.get('total_orders_synced', 0)\n                    chunks = f\"{data.get('completed_chunks', 0)}/{data.get('total_chunks', 0)}\"\n                    remaining = int(data.get('estimated_remaining_seconds', 0))\n                    \n                    print(f\"\\r🔄 Progress: {progress:.1f}% | Orders: {orders:,} | Chunks: {chunks} | ETA: {remaining//60}m {remaining%60}s\", end=\"\", flush=True)\n                    \n                else:\n                    print(f\"\\r❌ Status check failed: HTTP {response.status_code}\", end=\"\", flush=True)\n                    \n            except requests.RequestException as e:\n                print(f\"\\r⚠️  Network error: {e}\", end=\"\", flush=True)\n            \n            time.sleep(5)  # Check every 5 seconds\n            \n    except KeyboardInterrupt:\n        print(\"\\n\\n⏸️  Monitoring stopped (sync continues in background)\")\n        print(\"   You can check status at: https://nytex-dashboard-932676587025.us-central1.run.app/admin\")\n\ndef main():\n    \"\"\"Main execution function\"\"\"\n    print_banner(\"PRODUCTION DATABASE SCHEMA FIX & HISTORICAL SYNC\")\n    \n    print(\"\\n📋 This script will:\")\n    print(\"   1. ✅ Schema migration already applied via Alembic\")\n    print(\"   2. 🗑️  Clear partial order data from failed sync\")\n    print(\"   3. 🚀 Start complete historical orders sync\")\n    print(\"   4. 📊 Monitor progress until completion\")\n    \n    print(\"\\n🎯 Expected Results:\")\n    print(\"   - Orders: ~30,391 (matching development)\")\n    print(\"   - Order Line Items: ~159,535\")\n    print(\"   - Date Range: 2018-05-20 to 2025-06-06\")\n    \n    # Get current status\n    print_banner(\"CHECKING CURRENT PRODUCTION STATUS\")\n    status = get_production_status()\n    if status:\n        table_counts = status.get('table_counts', {})\n        current_orders = table_counts.get('orders', 0)\n        current_line_items = table_counts.get('order_line_items', 0)\n        \n        print(f\"📊 Current Production Database:\")\n        print(f\"   - Orders: {current_orders:,}\")\n        print(f\"   - Order Line Items: {current_line_items:,}\")\n        \n        if current_orders > 0:\n            print(f\"\\n⚠️  WARNING: Found {current_orders:,} existing orders\")\n            print(\"   These are likely from the partial sync that failed due to schema issues.\")\n            print(\"   The historical sync will handle duplicates properly with the fixed schema.\")\n    \n    # Confirm before proceeding\n    print(\"\\n\" + \"⚠️ \" * 20)\n    print(\"IMPORTANT: This will start a complete historical sync that may take 30-60 minutes.\")\n    print(\"The sync will run in the background and is safe to interrupt monitoring.\")\n    print(\"⚠️ \" * 20)\n    \n    confirm = input(\"\\nProceed with historical sync? (yes/no): \").strip().lower()\n    if confirm not in ['yes', 'y']:\n        print(\"❌ Operation cancelled.\")\n        return\n    \n    # Start the historical sync\n    print_banner(\"STARTING HISTORICAL ORDERS SYNC\")\n    if start_historical_sync():\n        # Monitor progress\n        monitor_sync_progress()\n        \n        # Final status check\n        print_banner(\"FINAL VERIFICATION\")\n        final_status = get_production_status()\n        if final_status:\n            table_counts = final_status.get('table_counts', {})\n            final_orders = table_counts.get('orders', 0)\n            final_line_items = table_counts.get('order_line_items', 0)\n            \n            print(f\"📊 Final Production Database:\")\n            print(f\"   - Orders: {final_orders:,}\")\n            print(f\"   - Order Line Items: {final_line_items:,}\")\n            \n            # Compare with expected\n            expected_orders = 30391\n            if final_orders >= expected_orders * 0.95:  # Allow 5% variance\n                print(f\"\\n🎉 SUCCESS! Production database now matches development.\")\n                print(f\"   Sync completed with {final_orders:,} orders (expected ~{expected_orders:,})\")\n            else:\n                print(f\"\\n⚠️  PARTIAL SUCCESS: Got {final_orders:,} orders (expected ~{expected_orders:,})\")\n                print(f\"   This may indicate some chunks still failed due to data issues.\")\n                print(f\"   Check the admin panel for detailed error logs.\")\n        \n        print(\"\\n✅ Schema fix and sync process completed!\")\n        print(\"🔗 Admin Panel: https://nytex-dashboard-932676587025.us-central1.run.app/admin\")\n    else:\n        print(\"❌ Failed to start historical sync. Check the admin panel for details.\")\n\nif __name__ == \"__main__\":\n    main() 